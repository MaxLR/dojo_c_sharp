// Using statements
using System.Diagnostics;
using Microsoft.AspNetCore.Mvc;
using EntityFrameworkLecture.Models;
namespace EntityFrameworkLecture.Controllers;
    
public class PostController : Controller
{
    private EFLectureContext _context;
     
    // here we can "inject" our context service into the constructor
    public PostController(EFLectureContext context)
    {
        _context = context;
    }
     
    [HttpGet("/")]
    [HttpGet("/posts/all")]
    public IActionResult All()
    {
        List<Post> AllPosts = _context.Posts.ToList();

        return View("All", AllPosts);
    }

    [HttpGet("/posts/new")]
    public IActionResult New()
    {
        return View("New");
    }

    [HttpPost("/posts/create")]
    public IActionResult Create(Post newPost)
    {
        if (ModelState.IsValid == false) {
            // by not defaulting the return of View() in New, we can invoke the New() function & not have to re-write code
            // return View("New");

            return New();
        }

        //this only runs if ModelState.IsValid == true
        _context.Posts.Add(newPost);
        // our sql database doesn't update until we save changes
        // after calling SaveChanges, our newPost will now have a value stored in PostId that was automatically generated by our database
        _context.SaveChanges();

        return RedirectToAction("All");
    }
 }
